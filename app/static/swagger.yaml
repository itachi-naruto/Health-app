openapi: 3.0.1
info:
  title: Swagger Dr. Search
  description: This is an API document for Dr. Search App
  contact:
    email: info@smartlaboman.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://syhaty-api.smartlaboman.com/project/api/v1
- url: http://127.0.0.1:5000/project/api/v1
security:
- basicAuth: []
- JWT: []
tags:
- name: login
  description: Operations about login
- name: signup
  description: Operations about signup
- name: email
  description: Operations about email
- name: user
  description: Operations about user
- name: doctor
  description: Operations about Doctor
- name: patient
  description: Operations about Patient
- name: center
  description: Operations about Center
- name: media
  description: Operations about Media
- name: favorite
  description: Operations about Favorite
- name: payment
  description: Operations about Payment
- name: setting
  description: Operations about Setting
- name: chat
  description: Operations about Chat
paths:
  /login/:
    post:
      tags:
      - login
      summary: login
      description: to login
      operationId: login
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        408:
          $ref: '#/components/schemas/Global'
  /login/resetpassword/{unique}:
    post:
      tags:
      - login
      summary: resetpassword
      description: resetpassword
      operationId: resetpassword
      parameters:
      - name: unique
        in: path
        description: The id that needs to be resetpassword
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /login/forgotpassword/{unique}:
    post:
      tags:
      - login
      summary: forgotpassword
      description: forgotpassword
      operationId: forgotpassword
      parameters:
      - name: unique
        in: path
        description: The id that needs to be forgotpassword
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
          
  /signup/:
    post:
      tags:
      - signup
      summary: signup
      description: signup
      operationId: signup
      requestBody:
        description: Add payment object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
  
  /signup/confirm/{token}:
    post:
      tags:
      - signup
      summary: confirm
      description: confirm
      operationId: confirm
      parameters:
      - name: token
        in: path
        description: The id that needs to be confirm
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        401:
          $ref: '#/components/responses/Unauthorized'
  /email/:
    post:
      tags:
      - email
      summary: email
      description: email
      operationId: email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
  /users/:
    get:
      tags:
      - user
      summary: Get All Users
      description: This can only be done by the logged in user.
      operationId: GetUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/{userId}:
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid userId supplied
          content: {}
        404:
          description: User not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/disable/{userId}:
    patch:
      tags:
      - user
      summary: Disable user
      description: This can only be done by the logged in user.
      operationId: disableUser
      parameters:
      - name: userId
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid userId supplied
          content: {}
        404:
          description: User not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /doctors/:
    get:
      tags:
      - doctor
      summary: Get All Doctors
      description: This can only be done by the logged in user.
      operationId: GetDoctors
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  doctors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'
        401:
          $ref: '#/components/responses/Unauthorized'
  /doctors/{doctorId}:
    get:
      tags:
      - doctor
      summary: Get doctor
      description: This can only be done by the logged in user.
      operationId: getDoctorById
      parameters:
      - name: doctorId
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid doctorId supplied
          content: {}
        404:
          description: Doctors not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - doctor
      summary: Updated Doctor
      description: This can only be done by the logged in user.
      operationId: updateDoctor
      parameters:
      - name: doctorId
        in: path
        description: ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated doctor object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Doctor'
        required: true
      responses:
        400:
          description: Invalid Doctor supplied
          content: {}
        404:
          description: Doctor not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /doctors/disable/{doctorId}:
    patch:
      tags:
      - doctor
      summary: Disable doctor
      description: This can only be done by the logged in user.
      operationId: disableDoctor
      parameters:
      - name: doctorId
        in: path
        description: The id that needs to be disable
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid doctorId supplied
          content: {}
        404:
          description: User not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /doctors/approve/{doctorId}:
    patch:
      tags:
      - doctor
      summary: Approve doctor
      description: This can only be done by the logged in user.
      operationId: approveDoctor
      parameters:
      - name: doctorId
        in: path
        description: The id that needs to be approved
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid doctorId supplied
          content: {}
        404:
          description: User not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /patients/:
    get:
      tags:
      - patient
      summary: Get All Patients
      description: This can only be done by the logged in user.
      operationId: GetPatients
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  patients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Patient'
        401:
          $ref: '#/components/responses/Unauthorized'
  /patients/{patientId}:
    get:
      tags:
      - patient
      summary: Get patient
      description: This can only be done by the logged in user.
      operationId: getPatientById
      parameters:
      - name: patientId
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid patientId supplied
          content: {}
        404:
          description: Patients not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /centers/:
    get:
      tags:
      - center
      summary: Get All Centers
      description: This can only be done by the logged in user.
      operationId: GetCenters
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  centers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Center'
        401:
          $ref: '#/components/responses/Unauthorized'
  /centers/{centerId}:
    get:
      tags:
      - center
      summary: Get center
      description: This can only be done by the logged in user.
      operationId: getCenterById
      parameters:
      - name: centerId
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid centerId supplied
          content: {}
        404:
          description: Centers not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - center
      summary: Updated Center
      description: This can only be done by the logged in user.
      operationId: updateCenter
      parameters:
      - name: centerId
        in: path
        description: ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated center object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Center'
        required: true
      responses:
        400:
          description: Invalid Center supplied
          content: {}
        404:
          description: Center not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /centers/disable/{centerId}:
    patch:
      tags:
      - center
      summary: Disable center
      description: This can only be done by the logged in user.
      operationId: disableCenter
      parameters:
      - name: centerId
        in: path
        description: The id that needs to be disable
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid centerId supplied
          content: {}
        404:
          description: User not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /centers/approve/{centerId}:
    patch:
      tags:
      - center
      summary: Approve center
      description: This can only be done by the logged in user.
      operationId: approveCenter
      parameters:
      - name: centerId
        in: path
        description: The id that needs to be approved
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid centerId supplied
          content: {}
        404:
          description: User not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /payments/:
    get:
      tags:
      - payment
      summary: Get All Payments
      description: This can only be done by the logged in user.
      operationId: GetPayments
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentTransaction'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
      - payment
      summary: Add Payment
      description: This can only be done by the logged in user.
      operationId: AddPayment
      requestBody:
        description: Add payment object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PaymentTransaction'
        required: true
      responses:
        400:
          description: Invalid payment supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /payments/{paymentId}:
    get:
      tags:
      - payment
      summary: Get payment
      description: This can only be done by the logged in user.
      operationId: getPaymentById
      parameters:
      - name: paymentId
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid paymentId supplied
          content: {}
        404:
          description: Payments not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
      - payment
      summary: Delete payment
      description: This can only be done by the logged in user.
      operationId: deletePayment
      parameters:
      - name: paymentId
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid paymentId supplied
          content: {}
        404:
          description: Payment not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - payment
      summary: Updated Payment
      description: This can only be done by the logged in user.
      operationId: updatePayment
      parameters:
      - name: paymentId
        in: path
        description: ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated payment object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PaymentTransaction'
        required: true
      responses:
        400:
          description: Invalid payment supplied
          content: {}
        404:
          description: payment not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /payments/model/{model_type}:
    get:
      tags:
      - payment
      summary: Get payment
      description: This can only be done by the logged in user.
      operationId: getPaymentByModelType
      parameters:
      - name: model_type
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid paymentId supplied
          content: {}
        404:
          description: Payments not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /payments/model/{model_type}/{model_id}:
    get:
      tags:
      - payment
      summary: Get payment
      description: This can only be done by the logged in user.
      operationId: getPaymentByModelTypeAndId
      parameters:
      - name: model_type
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      - name: model_id
        in: path
        description: The model id that needs to get
        required: true
        schema:
          type: number
      responses:
        400:
          description: Invalid prameters supplied
          content: {}
        404:
          description: Payments not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /payments/reference/{reference_id}:
    get:
      tags:
      - payment
      summary: Get payment
      description: This can only be done by the logged in user.
      operationId: getPaymentByReferenceTd
      parameters:
      - name: reference_id
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid reference id supplied
          content: {}
        404:
          description: Payments not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /payments/transaction/{transaction_id}:
    get:
      tags:
      - payment
      summary: Get payment
      description: This can only be done by the logged in user.
      operationId: getPaymentBytTransactionTd
      parameters:
      - name: transaction_id
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid transaction id supplied
          content: {}
        404:
          description: Payments not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /medias/:
    get:
      tags:
      - media
      summary: Get All Medias
      description: This can only be done by the logged in user.
      operationId: GetMedias
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  medias:
                    type: array
                    items:
                      $ref: '#/components/schemas/Media'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
      - media
      summary: Add Media
      description: This can only be done by the logged in user.
      operationId: AddMedia
      requestBody:
        description: Add media object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Media'
        required: true
      responses:
        400:
          description: Invalid media supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /medias/{mediaId}:
    get:
      tags:
      - media
      summary: Get media
      description: This can only be done by the logged in user.
      operationId: getMediaById
      parameters:
      - name: mediaId
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid mediaId supplied
          content: {}
        404:
          description: Medias not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
      - media
      summary: Delete media
      description: This can only be done by the logged in user.
      operationId: delete_media
      parameters:
      - name: mediaId
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid mediaId supplied
          content: {}
        404:
          description: Media not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - media
      summary: Updated Media
      description: This can only be done by the logged in user.
      operationId: update_media
      parameters:
      - name: mediaId
        in: path
        description: ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated media object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Media'
        required: true
      responses:
        400:
          description: Invalid media supplied
          content: {}
        404:
          description: media not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /medias/model/{model_type}:
    get:
      tags:
      - media
      summary: Get media
      description: This can only be done by the logged in user.
      operationId: getMediaByModelType
      parameters:
      - name: model_type
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid mediaId supplied
          content: {}
        404:
          description: Medias not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /medias/model/{model_type}/{model_id}:
    get:
      tags:
      - media
      summary: Get media
      description: This can only be done by the logged in user.
      operationId: getMediaByModelTypeAndId
      parameters:
      - name: model_type
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      - name: model_id
        in: path
        description: The model id that needs to get
        required: true
        schema:
          type: number
      responses:
        400:
          description: Invalid prameters supplied
          content: {}
        404:
          description: Medias not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /medias/files-upload/{model_type}:
    post:
      tags:
      - media
      summary: Get media
      description: This can only be done by the logged in user.
      operationId: postMediaByModelType
      parameters:
      - name: model_type
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                files:
                  type: string
                  description: The file to upload.
                  format: binary
      responses:
        400:
          description: Invalid mediaId supplied
          content: {}
        404:
          description: Medias not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /medias/files-upload/{model_type}/{model_id}:
    post:
      tags:
      - media
      summary: Get media
      description: This can only be done by the logged in user.
      operationId: postMediaByModelTypeAndId
      parameters:
      - name: model_type
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      - name: model_id
        in: path
        description: The model id that needs to get
        required: true
        schema:
          type: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                files:
                  type: string
                  description: The file to upload.
                  format: binary
      responses:
        400:
          description: Invalid prameters supplied
          content: {}
        404:
          description: Medias not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /settings/:
    get:
      tags:
      - setting
      summary: Get All Settings
      description: This can only be done by the logged in user.
      operationId: GetSettings
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Setting'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
      - setting
      summary: Add Setting
      description: This can only be done by the logged in user.
      operationId: AddSetting
      requestBody:
        description: Add setting object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Setting'
        required: true
      responses:
        400:
          description: Invalid setting supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /settings/{key}:
    get:
      tags:
      - setting
      summary: Get setting
      description: This can only be done by the logged in user.
      operationId: getSettingBykey
      parameters:
      - name: key
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid key supplied
          content: {}
        404:
          description: Settings not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
      - setting
      summary: Delete setting
      description: This can only be done by the logged in user.
      operationId: deleteSetting
      parameters:
      - name: key
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid key supplied
          content: {}
        404:
          description: Setting not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - setting
      summary: Updated Setting
      description: This can only be done by the logged in user.
      operationId: updateSetting
      parameters:
      - name: key
        in: path
        description: ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated setting object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Setting'
        required: true
      responses:
        400:
          description: Invalid setting supplied
          content: {}
        404:
          description: setting not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /settings/category/{category}:
    get:
      tags:
      - setting
      summary: Get setting
      description: This can only be done by the logged in user.
      operationId: getSettingByCategory
      parameters:
      - name: category
        in: path
        description: The model type that needs to get
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid category supplied
          content: {}
        404:
          description: Settings not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /chats/:
    get:
      tags:
      - chat
      summary: Get All Chats
      description: This can only be done by the logged in user.
      operationId: GetChats
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
          description: items per page
        - in: query
          name: sort
          schema:
            type: string
          description: sort field
        - in: query
          name: sort_order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: order
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatGet'
                  filter:
                      $ref: '#/components/schemas/filter'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
      - chat
      summary: Create Chat
      description: This can only be done by the logged in user.
      operationId: CreateChat
      requestBody:
        description: Create chat object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatPost'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string

        400:
          description: Invalid chat supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /chats/{chat_id}:
    post:
      tags:
      - chat
      summary: add Chat Message 
      description: This can only be done by the logged in user.
      operationId: AddChatMessage
      parameters:
      - name: chat_id
        in: path
        description: The Chat id that needs to post
        required: true
        schema:
          type: string
      requestBody:
        description: Add chat object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreate'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string

        400:
          description: Invalid chat supplied
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /chats/{id}:
    get:
      tags:
      - chat
      summary: Get chat
      description: This can only be done by the logged in user.
      operationId: getChatById
      parameters:
      - name: id
        in: path
        description: The id that needs to get
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
      - chat
      summary: Delete chat
      description: This can only be done by the logged in user.
      operationId: deleteChat
      parameters:
      - name: id
        in: path
        description: The id that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: Chat not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
      - chat
      summary: Updated Chat
      description: This can only be done by the logged in user.
      operationId: updateChat
      parameters:
      - name: id
        in: path
        description: ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated chat object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatGet'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid chat supplied
          content: {}
        404:
          description: chat not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
      x-codegen-request-body-name: body
  /chats/receiver/:
    get:
      tags:
      - chat
      summary: Get chat
      description: This can only be done by the logged in user.
      operationId: getChatByLoginInUser
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: per_page
          schema:
            type: integer
          description: items per page
        - in: query
          name: sort
          schema:
            type: string
          description: sort field
        - in: query
          name: sort_order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: order
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatGet'
                  filter:
                      $ref: '#/components/schemas/filter'
        400:
          description: Invalid receiver supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'

  /chats/receiver/count/:
    get:
      tags:
      - chat
      summary: Get Count chat
      description: This can only be done by the logged in user.
      operationId: getCountChatByLoginInUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid receiver supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  
  /chats/read/{id}:
    get:
      tags:
      - chat
      summary: read chat
      description: This can only be done by the logged in user.
      operationId: readChatById
      parameters:
      - name: id
        in: path
        description: The user id that needs to get
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid receiver supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /chats/read/all/:
    get:
      tags:
      - chat
      summary: read all chat by user id
      description: This can only be done by the logged in user.
      operationId: readAllChatByLoginUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid receiver supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  /chats/chat/{chat_id}:
    get:
      tags:
      - chat
      summary: Get chat
      description: This can only be done by the logged in user.
      operationId: getChatByChatId
      parameters:
      - name: chat_id
        in: path
        description: The user id that needs to get
        required: true
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: per_page
        schema:
          type: integer
        description: items per page
      - in: query
        name: sort
        schema:
          type: string
        description: sort field
      - in: query
        name: sort_order
        schema:
          type: string
          enum:
            - asc
            - desc
        description: order
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatGet'
                  filter:
                      $ref: '#/components/schemas/filter'
        400:
          description: Invalid chat_id supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'

  /chats/chat/count/{chat_id}:
    get:
      tags:
      - chat
      summary: Get Count chat
      description: This can only be done by the logged in user.
      operationId: getCountChatByChatId
      parameters:
      - name: chat_id
        in: path
        description: The chat_id id that needs to get
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid chat_id supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
  
  /chats/chat/read/all/{chat_id}:
    get:
      tags:
      - chat
      summary: read all chat by user id
      description: This can only be done by the logged in user.
      operationId: readAllChatById
      parameters:
      - name: chat_id
        in: path
        description: The user id that needs to get
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Global'
        400:
          description: Invalid chat_id supplied
          content: {}
        404:
          description: Chats not found
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    Signup:
      type: object
      properties:
        phone:
          type: integer
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        is_active:
          type: boolean
        phone:
          type: integer
        email:
          type: string
          format: email
        mobile_confirmed_at:
          type: string
          format: date-time
        email_confirmed_at:
          type: string
          format: date-time
    Center:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          type: string
          default: OM
        address:
          type: string
        place_location:
          type: string
        exact_location:
          type: string
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
          example: Ali
        last_name:
          type: string
          example: Al
        gender:
          type: string
        birth_date:
          type: string
          format: date-time
        blood_type:
          type: string
        country:
          type: string
          default: OM
    Doctor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        public_id:
          type: string
          format: uuid
        first_name:
          type: string
          example: Ali
        last_name:
          type: string
          example: Al
        gender:
          type: string
        birth_date:
          type: string
          format: date-time
        blood_type:
          type: string
        country:
          type: string
          default: OM
        address:
          type: string
        place_location:
          type: string
        exact_location:
          type: string
        speciality:
          type: string
          format: JSON
        professional_experiance:
          type: string
        certification:
          type: string
          format: JSON
        experiance:
          type: string
        education:
          type: string
          format: JSON
        memberships:
          type: string
          format: JSON
        follow_up_fee:
          type: number
          format: float
        consultation_fee:
          type: number
          format: float
        biography:
          type: string
        medical_board_registrations:
          type: string
          format: JSON
        know_languages:
          type: string
          format: JSON
    PaymentTransaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        active:
          type: boolean
        requester:
          type: string
        reference_id:
          type: string
        transaction_id:
          type: string
          format: date-time
        payment_status:
          type: string
          description: Payment Status
          enum:
          - none
          - pending
          - cancel
          - error
          - fail
          - success
        amount:
          type: number
          format: float
        vat:
          type: number
          format: float
        model_type:
          type: string
        model_id:
          type: integer
          format: int64
        response_code:
          type: string
        response_decision:
          type: string
        card_number:
          type: string
        card_expiry_date:
          type: string
        note:
          type: string
        dump_response:
          type: string
        custom_properties:
          type: string
          format: JSON
        create_date:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
        payment_gateway:
          type: string
        payment_type:
          type: string
    Media:
      type: object
      properties:
        id:
          type: integer
          format: int64
        model_type:
          type: string
          example: users
        model_id:
          type: integer
          format: int64
        collection_name:
          type: string
        name:
          type: string
        mime_type:
          type: string
        disk:
          type: string
        size:
          type: string
        order_column:
          type: integer
          format: int32
        upload_file:
          type: string
        custom_properties:
          type: string
          format: JSON
        create_date:
          type: string
          format: date-time
        last_modified:
          type: string
          format: date-time
    Setting:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        category:
          type: string
        last_modified:
          type: string
          format: date-time
    ChatCreate:
      type: object
      properties:
        receiver:
          type: string
          format: uuid
        attachement:
          type: string
        reply_to:
          type: string
          format: uuid
        message:
          type: string
    ChatPost:
      type: object
      properties:
        receiver:
          type: string
          format: uuid
        chat_id:
          type: string
        attachement:
          type: string
        reply_to:
          type: string
          format: uuid
        message:
          type: string

    ChatGet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sender:
          type: string
          format: uuid
        receiver:
          type: string
          format: uuid
        chat_id:
          type: string
          format: uuid
        attachement:
          type: string
        reply_to:
          type: string
          format: uuid
        read:
          type: boolean
        create_time:
          type: string
          format: date-time
        read_time:
          type: string
          format: date-time
          
        message:
          type: string
    JWTToken:
      type: object
      properties:
        token:
          type: string
        id:
          type: integer
        public_id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role_id:
          type: integer
        role:
          type: string
    filter:
      type: object
      properties:
        page:
          type: integer
          format: int64
        per_page:
          type: integer
          format: int64
        sort:
          type: string
        sort_order:
          type: string
          enum:
              - asc
              - desc
        queries:
          type: string
    Global:
      required:
      #- code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    Error:
      required:
      #- code
      - message
      type: object
      properties:
        #code:
        #  type: string
        message:
          type: string
          example: Authorization information is missing or invalid.
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    JWT:
      type: apiKey
      name: x-access-tokens
      in: header
